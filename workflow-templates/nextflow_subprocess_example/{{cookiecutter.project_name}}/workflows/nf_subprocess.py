"""
This module defines a Flyte workflow for an existing Nextflow script.
"""

import os
import subprocess
from pathlib import Path
from typing import NamedTuple

import flytekit
from flytekit import task, workflow
from flytekit.types.file import FlyteFile


def subp_run(cmd):
    """
    Run a subprocess command and print its output and error messages.

    Parameters:
    - cmd (list): A list representing the command to be executed.

    Raises:
    - subprocess.CalledProcessError: If the subprocess command returns a non-zero exit code.

    Returns:
    - None
    """
    try:
        with subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True) as proc:
            for line in proc.stdout:
                print("Output:", line, end="", flush=True)

            for line in proc.stderr:
                print("Error:", line, end="", flush=True)

            # Wait until process finishes and get the returncode
            retcode = proc.wait()

            if retcode:
                raise subprocess.CalledProcessError(retcode, cmd)
    except subprocess.CalledProcessError as e:
        print("Command failed with error code:", e.returncode, flush=True)
        raise


@task
def nextflow_run(input_gene_counts_file: FlyteFile) -> FlyteFile:
    """
    Run a Nextflow pipeline using the provided gene counts file path on S3.

    Parameters:
    - input_gene_counts_file (FlyteFile): Input gene counts file in FlyteFile format (S3).

    Returns:
    - FlyteFile: Output file generated by the Nextflow pipeline (rows with counts greater than or equal to MINIMUM_COUNT)
    """
    working_dir = flytekit.current_context().working_directory
    output_path = Path(os.path.join(working_dir, "output.tsv"))

    subp_run(
        [
            "nextflow",
            "run",
            "workflows/gene_count_example.nf",
            "-plugins",
            "nf-amazon",
            "--gene_counts",
            input_gene_counts_file,
            "--outdir",
            working_dir,
        ]
    )
    return FlyteFile(path=output_path)


output = NamedTuple(
    "output",
    output=FlyteFile,
)


@workflow
def gene_count(input_gene_counts_file: FlyteFile) -> output:
    """
    Runs a nextflow code that ingests s3 file of gene counts (tsv) and returns a subset of a dataframe if count>=MINIMUM_COUNT defined in nextflow script.

    Parameters:
    - gene_counts_dir (str): S3 path where gene_counts.tsv can be found. (see s3 location in resources)

    Returns:
    - output (FlyteFile): subset of original dataframe generated by nextflow
    """
    return output(output=nextflow_run(input_gene_counts_file=input_gene_counts_file))
